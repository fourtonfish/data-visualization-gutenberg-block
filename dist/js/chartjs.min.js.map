{"version":3,"sources":["chartjs.js"],"names":["ready","fn","document","readyState","addEventListener","window","ftfHelpers","isMobile","a","check","navigator","userAgent","vendor","opera","test","substr","convertHex","hex","opacity","parseInt","substring","p","c0","c1","r","g","b","P","f","t","h","i","m","Math","round","this","pSBCr","d","n","length","x","replace","split","slice","parseFloat","result","l","pow","toString","undefined","invertColor","bw","indexOf","padZero","str","len","Array","renderChart","chartEl","dataset","config","eval","console","log","err","chartLabels","chartData","type","sourceId","JSON","parse","stringify","ftfDataviz","data_labels_raw","data_series_raw","datavizType","sort","data_labels_sorted","data_series_sorted","data_labels","data_series","zeros","ignoreNull","forEach","datapoints","indexOuter","datapoint","indexInner","removeDatapoint","filter","item","limit","axesLabels","axesValues","dataRows","data","index","axis_label_values","label","__custom_meta","prefix","suffix","colorScheme","colorPalettes","backgroundColor","borderColor","fill","colorSchemeIndex","_loop","columnFilter","datasets","concat","map","dataArray","options","scaleLabel","display","labelString","axis_label_title","ticks","beginAtZero","logScale","userCallback","value","toLocaleString","maxTicksLimit","isAdmin","chartOptions","scales","yAxes","tooltips","callbacks","tooltipItem","xLabel","datasetIndex","labels","yLabel","responsive","hoverBorderColor","pSBC","borderWidth","xAxes","selectedColorScheme","Object","keys","color","hoverBorderWidth","title","labelY","y","position","stepSize","callback","Date","toLocaleDateString","language","month","year","minorTickInterval","legend","getDate","push","day","showGridlines","xAxis","gridLines","drawBorder","drawOnChartArea","yAxis","height","newChart","Chart","clearActive","activate","activatePrev","selectedIndex","meta","controller","removeHoverStyle","setHoverStyle","render","getDatasetMeta","activateNext","e","key","getElementsByClassName","wpAdmin","charts","querySelectorAll","_iterator","s","_step","done","ev","dataVizEl","target","closest","querySelector","innerHTML","mapData","dataIndex","min","dataRow","sliders","parentElement","textContent","max"],"mappings":"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","file":"chartjs.min.js","sourcesContent":["'use strict';\n\nfunction ready( fn ) {\n    if ( document.readyState != 'loading' ){\n        fn();\n    } else {\n        document.addEventListener( 'DOMContentLoaded', fn );\n    }\n}\n\nwindow.ftfHelpers = window.ftfHelpers || {};\n\nftfHelpers.isMobile = function(){\n    var check = false;\n    (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n    return check;\n}\n\nftfHelpers.convertHex = function( hex, opacity ){\n    /* https://gist.github.com/danieliser/b4b24c9f772066bcf0a6 */\n    if (!hex){\n        hex = '#000000';\n    }\n\n    hex = hex.replace( '#','' );\n\n    let r, g, b;\n\n    r = parseInt( hex.substring( 0,2 ), 16 );\n    g = parseInt( hex.substring( 2,4 ), 16 );\n    b = parseInt( hex.substring( 4,6 ), 16 );\n\n    let result = 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';\n    return result;\n}\n\nftfHelpers.pSBC = function(p,c0,c1,l){\n    let r,g,b,P,f,t,h,i=parseInt,m=Math.round,a=typeof(c1)==\"string\";\n    if(typeof(p)!=\"number\"||p<-1||p>1||typeof(c0)!=\"string\"||(c0[0]!='r'&&c0[0]!='#')||(c1&&!a))return null;\n    if(!this.pSBCr)this.pSBCr=(d)=>{\n        let n=d.length,x={};\n        if(n>9){\n            [r,g,b,a]=d=d.split(\",\"),n=d.length;\n            if(n<3||n>4)return null;\n            x.r=i(r[3]==\"a\"?r.slice(5):r.slice(4)),x.g=i(g),x.b=i(b),x.a=a?parseFloat(a):-1\n        }else{\n            if(n==8||n==6||n<4)return null;\n            if(n<6)d=\"#\"+d[1]+d[1]+d[2]+d[2]+d[3]+d[3]+(n>4?d[4]+d[4]:\"\");\n            d=i(d.slice(1),16);\n            if(n==9||n==5)x.r=d>>24&255,x.g=d>>16&255,x.b=d>>8&255,x.a=m((d&255)/0.255)/1000;\n            else x.r=d>>16,x.g=d>>8&255,x.b=d&255,x.a=-1\n        }return x};\n    h=c0.length>9,h=a?c1.length>9?true:c1==\"c\"?!h:false:h,f=this.pSBCr(c0),P=p<0,t=c1&&c1!=\"c\"?this.pSBCr(c1):P?{r:0,g:0,b:0,a:-1}:{r:255,g:255,b:255,a:-1},p=P?p*-1:p,P=1-p;\n    if(!f||!t)return null;\n    if(l)r=m(P*f.r+p*t.r),g=m(P*f.g+p*t.g),b=m(P*f.b+p*t.b);\n    else r=m((P*f.r**2+p*t.r**2)**0.5),g=m((P*f.g**2+p*t.g**2)**0.5),b=m((P*f.b**2+p*t.b**2)**0.5);\n    a=f.a,t=t.a,f=a>=0||t>=0,a=f?a<0?t:t<0?a:a*P+t*p:0;\n    if(h)return\"rgb\"+(f?\"a(\":\"(\")+r+\",\"+g+\",\"+b+(f?\",\"+m(a*1000)/1000:\"\")+\")\";\n    else return\"#\"+(4294967296+r*16777216+g*65536+b*256+(f?m(a*255):0)).toString(16).slice(1,f?undefined:-2)\n}\n\nftfHelpers.invertColor = function( hex, bw ) {\n    if ( !hex ){\n        return null;\n    }\n    if ( hex.indexOf( '#' ) === 0 ) {\n        hex = hex.slice( 1 );\n    }\n\n    if ( hex.length === 3 ) {\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n\n    var r = parseInt( hex.slice( 0, 2 ), 16 ),\n        g = parseInt( hex.slice( 2, 4 ), 16 ),\n        b = parseInt( hex.slice( 4, 6 ), 16 );\n\n    if ( bw ) {\n        return ( r * 0.299 + g * 0.587 + b * 0.114 ) > 186\n            ? '#000000'\n            : '#FFFFFF';\n    }\n\n    r = ( 255 - r ).toString( 16 );\n    g = ( 255 - g ).toString( 16 );\n    b = ( 255 - b ).toString( 16 );\n\n    return '#' + ftfHelpers.padZero( r ) + ftfHelpers.padZero( g ) + ftfHelpers.padZero( b );\n}\n\nftfHelpers.padZero = function( str, len ) {\n    len = len || 2;\n    var zeros = new Array( len ).join( '0' );\n    return ( zeros + str ).slice( -len );\n}\n\nftfHelpers.renderChart = function( chartEl ){\n    if ( !chartEl ){ return false; }\n\n    let chartOptions = {};\n\n    if ( chartEl.dataset.config ){\n        try{\n            // chartOptions = JSON.parse( chartEl.dataset.config );\n            chartOptions = eval( '(' + chartEl.dataset.config + ')' );\n        } catch( err ){ console.log( err ) /* noop */ }\n    } else{\n        let colorSchemeIndex = 3;\n        let datavizType = chartEl.dataset.type || 'bar';\n\n        let chartLabels, chartData;\n        if ( chartEl.dataset.sourceId ){\n            if ( datavizType === 'scatter' ){\n                chartLabels = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels_raw ) );\n                chartData = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_series_raw ) );\n            }\n            else if ( datavizType === 'scatter-dates' ){\n                chartData = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels_raw ) );\n                chartLabels = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_series_raw ) );\n            }\n            else if ( chartEl.dataset.sort && chartEl.dataset.sort === 'true' ){\n                chartLabels = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels_sorted ) );\n                chartData = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_series_sorted ) );\n            } else {\n                chartLabels = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels ) );\n                chartData = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_series ) );\n            }            \n        }\n\n        if ( chartEl.dataset.ignoreNull && chartEl.dataset.ignoreNull === 'true' ){\n\n            chartData.forEach( function( datapoints, indexOuter ){\n                let removeDatapoint = true;\n\n                datapoints.forEach( function( datapoint, indexInner ){\n                    if ( chartData[indexOuter][indexInner] && parseInt( chartData[indexOuter][indexInner] ) !== 0 ){\n                        removeDatapoint = false;\n                    }\n                } );\n\n                if ( removeDatapoint ){\n                    delete chartData[indexOuter];\n                    delete chartLabels[indexOuter];\n                }\n            } );\n\n            chartData = chartData.filter( function ( item ){ return item != undefined } );\n            chartLabels = chartLabels.filter( function ( item ){ return item != undefined } );\n        }\n\n\n        if ( chartEl.dataset.sort && chartEl.dataset.sort === 'true' && chartEl.dataset.limit ){\n            chartLabels = chartLabels.slice( 0, chartEl.dataset.limit );\n            chartData = chartData.slice( 0, chartEl.dataset.limit );\n        }\n\n        if ( chartData && chartData.length > 3 ){\n            colorSchemeIndex = chartData.length;\n        }\n\n        const dataRows = chartData ? chartData[0].length : 0;\n        let datasets = [];\n\n        for( let i = 0; i < dataRows; i++ ){\n            let dataArray = [];\n            let label = '';\n\n            chartData.forEach( function( data, index ){\n                if ( chartEl.dataset.sourceId ){\n                    label = window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_values[i];                    \n                }\n\n                // const label = chartData[i][index];\n                dataArray.push( chartData[index][i] );\n            } );\n\n            let dataset = {\n                label: label,\n                data: dataArray,\n                __custom_meta: {\n                    prefix: chartEl.dataset.prefix,\n                    suffix: chartEl.dataset.suffix\n                }\n            };\n\n            if ( chartEl.dataset.colorScheme ){\n                if ( chartEl.dataset.colorScheme && ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ){\n                    if ( [ 'bar', 'horizontalBar' ].indexOf( datavizType ) !== -1 ){\n                        dataset.backgroundColor = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows+3][i];\n                    } else if ( datavizType === 'line' ){\n                        dataset.borderColor = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows+3][i];\n                        dataset.fill = false;\n                    }\n                }\n\n            }\n\n            datasets.push( dataset );\n        }\n\n        if ( chartEl.dataset.columnFilter && chartEl.dataset.columnFilter === 'true' ){\n            for ( let i = 1; i < datasets.length; i++ ){\n                let selectHtml = `<label>${datasets[i].label}\n                    <select name=\"ftf-dataviz-filter-${ chartEl.dataset.sourceId }\" id=\"ftf-dataviz-filter-${ chartEl.dataset.sourceId }\">\n                      ${\n                        datasets[i].data.map( function( data ){\n                            return `<option value=\"option\">option</option>`;\n                        } )\n                      }\n                    </select>\n                </label>`; \n            }\n        \n            datasets = [datasets[0]];\n        }\n\n        chartOptions = {\n            type: datavizType,\n            data: {\n                labels: chartLabels,\n                datasets: datasets\n            },\n            options: {}\n        };\n\n        let axesLabels, axesValues;\n\n        switch ( datavizType ){\n            case 'horizontalBar':\n            case 'bar':\n            case 'line':\n                axesLabels = [{\n                    scaleLabel: {\n                        display: true,\n                        // labelString: chartEl.dataset.axisLabelData\n                        labelString: chartEl.dataset.sourceId ? window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_title : ''\n                    },\n                    ticks: {\n                        beginAtZero: true,\n                        // userCallback: function( value, index, values)  {\n                        //     return value.toLocaleString();\n                        // }\n                    }\n                }];\n\n                axesValues = [{\n                    scaleLabel: {\n                        display: true,\n                        labelString: chartEl.dataset.label\n                    },\n                    type: chartEl.dataset.logScale ? 'logarithmic' : 'linear',\n                    ticks: {\n                        beginAtZero: true,\n                        userCallback: function( value, index, values)  {\n                            return chartEl.dataset.prefix + value.toLocaleString() + chartEl.dataset.suffix;\n                        }\n                    }\n                }];\n\n                if ( chartEl.dataset.logScale && chartData.length > 4 ){\n                    /* Temporary fix for labels overlapping when using logarithmic scale. */\n                    // axesValues[0].ticks.minRotation = 30;\n                    axesValues[0].ticks.maxTicksLimit = chartData.length;\n                }\n\n                if ( ftfHelpers.isAdmin() ){\n                    // axesValues[0].ticks.maxTicksLimit = chartData.length;\n                    axesValues[0].ticks.maxTicksLimit = 4;\n                }\n\n                if ( datavizType === 'horizontalBar' ){\n                    chartOptions.options.scales = {\n                        xAxes: axesValues,\n                        yAxes: axesLabels\n                    };\n\n                    chartOptions.options.tooltips = {\n                      callbacks: {\n                        label: function( tooltipItem, data ) {\n                            return data['datasets'][0]['__custom_meta']['prefix'] + tooltipItem.xLabel.toLocaleString() + data['datasets'][0]['__custom_meta']['suffix'];\n                        }\n                      }\n                    }\n\n                } else {\n                    chartOptions.options.scales = {\n                        xAxes: axesLabels,\n                        yAxes: axesValues\n                    };\n\n                    chartOptions.options.tooltips = {\n                      callbacks: {\n                        title: function(tooltipItem, data) {\n                            return data.datasets[tooltipItem[0].datasetIndex].label;\n                        },\n                        label: function( tooltipItem, data ) {\n                            return `${data.labels[tooltipItem.index]}: ${data['datasets'][0]['__custom_meta']['prefix']}${tooltipItem.yLabel.toLocaleString()}${data['datasets'][0]['__custom_meta']['suffix']}`;\n                        }\n                      }\n                    }\n                }                \n\n                chartOptions.options.responsive = true;\n\n                if ( chartEl.dataset.colorScheme && ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ){\n                    chartOptions.data.datasets.forEach( function( dataset, index ){\n                        dataset.hoverBorderWidth = 4;\n                        dataset.hoverBorderColor = ftfHelpers.pSBC( -0.05, ftfHelpers.invertColor( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows+3][index] ) );\n                        dataset.borderWidth = 4;\n                    } );\n\n                }\n\n                break;\n            case 'pie':\n            case 'doughnut':\n            case 'polarArea':\n                for( let i = 0; i < dataRows; i++ ){\n                    if ( chartOptions.data && chartOptions.data.datasets[i] ){\n                        let selectedColorScheme;\n\n                        if ( chartEl.dataset.colorScheme ){\n                            if ( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][chartLabels.length] ){\n                                selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][chartLabels.length];\n                            } else {\n                                selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][Object.keys( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ).length - 3];\n                            }\n\n                            chartOptions.data.datasets[i].backgroundColor = selectedColorScheme;\n                            chartOptions.data.datasets[i].hoverBorderColor = selectedColorScheme.map( function( color ){\n                                return ftfHelpers.pSBC( -0.05, ftfHelpers.invertColor( color ) );\n                            } );\n\n                            chartOptions.data.datasets[i].hoverBorderWidth = 4;\n                            chartOptions.data.datasets[i].borderWidth = 4;\n                        }\n                    }\n                }\n\n                chartOptions.options.tooltips = {\n                  callbacks: {\n                    title: function(tooltipItem, data) {\n                        return data['labels'][tooltipItem[0]['index']];\n                    },\n                    label: function( tooltipItem, data ) {\n                        return data['datasets'][0]['__custom_meta']['prefix'] + parseInt( data['datasets'][0]['data'][tooltipItem['index']] ).toLocaleString() + data['datasets'][0]['__custom_meta']['suffix'];\n                    }\n                  }\n                }\n\n                break;\n            case 'radar':\n                for( let i = 0; i < dataRows; i++ ){\n                    if ( chartOptions.data && chartOptions.data.datasets[i] ){\n                    \n\n                        let selectedColorScheme;\n\n                        if ( chartEl.dataset.colorScheme ){\n                            if ( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows] ){\n                                selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows];\n                            } else {\n                                selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][Object.keys( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ).length - 3];\n                            }                        \n                            // chartOptions.data.datasets[i].fill = 'start';\n                            chartOptions.data.datasets[i].backgroundColor = ftfHelpers.convertHex( selectedColorScheme[i], 20 );\n                            chartOptions.data.datasets[i].borderColor = ftfHelpers.convertHex( selectedColorScheme[i], 40 );\n                            chartOptions.data.datasets[i].hoverBorderColor = ftfHelpers.convertHex( ftfHelpers.pSBC( -0.05, ftfHelpers.invertColor( selectedColorScheme[i] ) ), 40 );\n\n                            chartOptions.data.datasets[i].hoverBorderWidth = 4;\n                            chartOptions.data.datasets[i].borderWidth = 4;\n                        }\n                    }\n                }\n\n                chartOptions.options.tooltips = {\n                  callbacks: {\n                    title: function(tooltipItem, data) {\n                        return data['labels'][tooltipItem[0]['index']];\n                    },\n                    label: function( tooltipItem, data ) {\n                        return data['datasets'][0]['__custom_meta']['prefix'] + parseInt( data['datasets'][0]['data'][tooltipItem['index']] ).toLocaleString() + data['datasets'][0]['__custom_meta']['suffix'];\n                    }\n                  }\n                }\n\n                break;\n            case 'scatter':\n            case 'scatter-dates':\n                const labelX = chartEl.dataset.sourceId ? window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_title : '',\n                      labelY = chartOptions.data.datasets[0].label;\n\n                let selectedColorScheme;\n\n                if ( chartEl.dataset.colorScheme && chartOptions.data.datasets[0] ){\n                    if ( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows] ){\n                        selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows];\n                    } else {\n                        selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][Object.keys( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ).length - 3];\n                    }\n\n\n                    chartOptions.data.datasets[0].backgroundColor = ftfHelpers.convertHex( selectedColorScheme[0], 20 );\n                    chartOptions.data.datasets[0].borderColor = ftfHelpers.convertHex( selectedColorScheme[0], 40 );\n                    chartOptions.data.datasets[0].hoverBorderColor = ftfHelpers.convertHex( ftfHelpers.pSBC( -0.05, ftfHelpers.invertColor( selectedColorScheme[0] ) ), 40 );\n                }\n\n                chartOptions.data.datasets[0].hoverBorderWidth = 4;\n                chartOptions.data.datasets[0].borderWidth = 4;\n\n                axesLabels = [{\n                    scaleLabel: {\n                        display: true,\n                        // labelString: chartEl.dataset.axisLabelData\n                        labelString: chartEl.dataset.sourceId ? window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_title : ''\n                    },\n                    ticks: {\n                        // max: 3,\n                        // beginAtZero: true,\n                        // userCallback: function( value, index, values)  {\n                        //     return value.toLocaleString();\n                        // }\n                    }\n                }];\n\n                axesValues = [{\n                    scaleLabel: {\n                        display: true,\n                        labelString: labelY\n                    },\n                    type: chartEl.dataset.logScale ? 'logarithmic' : 'linear',\n                    ticks: {\n                        // beginAtZero: true,\n                        userCallback: function( value, index, values)  {\n                            return chartEl.dataset.prefix + value.toLocaleString() + chartEl.dataset.suffix;\n                        }\n                    }\n                }];   \n                \n                chartOptions.options.scales = {\n                    xAxes: axesValues,\n                    yAxes: axesLabels\n                };  \n\n                let datapoints = [];\n                chartOptions.data.labels.forEach( function( dataset, i ){\n\n                    let datapoint = { x: null, y: null };\n\n                    if ( datavizType === 'scatter-dates' ){\n                        chartOptions.type = 'scatter';\n                        chartOptions.options.scales = {\n                            'xAxes': [\n                                {\n                                   'type': 'time',\n                                   'position': 'bottom',\n                                   'ticks': {\n                                        beginAtZero: false,\n                                        stepSize: 10,\n\n                                        callback: (value) => {\n                                          return new Date( value ).toLocaleDateString( navigator.language, { month: 'long', year: 'numeric' } );\n                                        },\n                                    }\n                                }\n                            ],\n                            yAxes: [\n                                {\n                                    ticks: {\n                                        beginAtZero: false,\n                                        display: false\n                                    },\n                                    scaleLabel: {\n                                        display: false,\n                                        // labelString: chartEl.dataset.axisLabelData\n                                        // labelString: chartEl.dataset.sourceId ? window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_title : ''\n                                        // labelString: 'Day of the month'\n                                    },\n                                    minorTickInterval: null\n                                }\n                            ]\n                        };\n\n                        chartOptions.options.legend = {\n                            display: false\n                        };\n\n                        const d = new Date( chartOptions.data.labels[i] );\n                        datapoint.x = d;\n\n                        // Day of the month\n                        datapoint.y = d.getDate();\n\n                        // datapoint.y = i;\n                        // datapoint.y = 0;\n\n                    } else {\n                        datapoint.x = parseFloat( chartOptions.data.labels[i] );\n                        datapoint.y = parseFloat( chartOptions.data.datasets[0].data[i] );\n                    }\n\n                    datapoints.push( datapoint );\n                } );\n                chartOptions.data.datasets[0].data = datapoints;\n                chartOptions.data.datasets = [chartOptions.data.datasets[0]];\n                chartOptions.options.tooltips = {\n                  callbacks: {\n                    title: function(tooltipItem, data) {\n                      return new Date( data['labels'][tooltipItem[0]['index']] ).toLocaleDateString( navigator.language, { day: 'numeric', month: 'long', year: 'numeric' } );\n\n                    },\n                    label: function( tooltipItem, data ) {\n                        return chartEl.dataset.prefix + window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels_raw[tooltipItem['index']] + chartEl.dataset.suffix;\n                    }\n                  }\n                }                \n                break;\n        }\n\n    }\n\n    if ( !chartEl.dataset.showGridlines || chartEl.dataset.showGridlines.toString() === 'false' ){\n        chartOptions.options.scales = chartOptions.options.scales  || {};\n        chartOptions.options.scales.xAxes = chartOptions.options.scales.xAxes  || [];\n        chartOptions.options.scales.yAxes = chartOptions.options.scales.yAxes  || [];\n\n        chartOptions.options.scales.xAxes.forEach( function( xAxis ){\n            xAxis.gridLines = {\n            display: true,\n            drawBorder: true,\n            drawOnChartArea: false,\n            };\n        } );\n\n        chartOptions.options.scales.yAxes.forEach( function( yAxis ){\n            yAxis.gridLines = {\n            display: true,\n            drawBorder: true,\n            drawOnChartArea: false,\n            };\n        } );\n    }\n    if ( chartEl.dataset.options ){\n        try{\n            chartOptions.options = eval( '(' + chartEl.dataset.options + ')' );\n        } catch( err ){ console.log( err ) /* noop */ }\n    }\n\n    if ( ftfHelpers.isMobile() ){\n        chartEl.height = chartEl.width;\n    }\n\n    if ( chartOptions ){\n        console.log( 'rendering chart...', chartEl, chartOptions );\n        // console.log( 'data', chartOptions.data.datasets );\n\n        try{\n            let newChart = new Chart( chartEl, chartOptions );\n            if ( !ftfHelpers.isAdmin() ){\n                /* Chart.js accessibility via https://codepen.io/kurkle/pen/WNrwjMp */\n\n                let selectedIndex = -1;\n                const meta = newChart.getDatasetMeta( 0 );\n\n                function clearActive() {\n                    if (selectedIndex > -1) {\n                        meta.controller.removeHoverStyle( meta.data[selectedIndex], 0, selectedIndex );\n                    }\n                }\n\n                function activate() {\n                    meta.controller.setHoverStyle( meta.data[selectedIndex], 0, selectedIndex );\n                    newChart.render();\n                }\n\n                function activateNext() {\n                    clearActive();\n                    selectedIndex = (selectedIndex + 1) % meta.data.length;\n                    activate();\n                }\n\n                function activatePrev() {\n                    clearActive();\n                    selectedIndex = ( selectedIndex || meta.data.length ) -1;\n                    activate();\n                }\n\n                chartEl.addEventListener( 'focus', function(){\n                    if (selectedIndex === -1) {\n                        activateNext();\n                    } else {\n                        activate();\n                    }\n                } );\n\n                chartEl.addEventListener( 'blur', function(){\n                    clearActive();\n                    newChart.render();\n                } );\n\n                chartEl.addEventListener( 'keydown', function( e ) {\n                    if ( e.key === 'ArrowRight' ) {\n                        activateNext();\n                    } else if ( e.key === 'ArrowLeft' ) {\n                        activatePrev();\n                    }\n                } );\n            }\n        } catch( err ){ /* noop */ }\n    }\n}\n\nftfHelpers.isAdmin = function(){\n    const wpAdmin = document.getElementsByClassName( 'wp-admin' );\n    return wpAdmin && wpAdmin.length;\n}\n\nready( function(){\n    let charts = document.getElementsByClassName( 'ftf-dataviz-chart' );\n    Array.from( charts ).forEach( function( chartEl ){\n        ftfHelpers.renderChart( chartEl );\n    } );\n    let sliders = document.querySelectorAll( '.ftf-dataviz-slider-container' );\n\n    for ( const slider of sliders ) {\n      slider.addEventListener( 'input', function( ev ){\n        const dataVizEl = ev.target.closest( '.ftf-dataviz' );\n\n        // console.log( 'dataVizEl', dataVizEl );\n        // console.log( 'ev.target', ev.target );\n        // console.log( 'ev.target.dataset.data', ev.target.dataset.data );\n\n        dataVizEl.querySelector( '.ftf-dataviz-slider-title' ).innerHTML = ev.target.value;\n\n        const mapData = JSON.parse( ev.target.dataset.data );\n        const dataIndex = ev.target.value - ev.target.min;\n\n        let datapoints = {};\n\n        mapData.forEach( function( datapoint ){\n            datapoints[datapoint[0]] = datapoint[dataIndex+1]\n        } );\n\n        // console.log( 'datapoints', datapoints );\n\n        for ( const dataRow in datapoints ){\n            if ( dataRow && dataRow.length > 0 ){\n\n                let value;\n\n                if ( datapoints[dataRow] ){\n                    value = ev.target.dataset.prefix + datapoints[dataRow] + ev.target.dataset.suffix;\n                } else {\n                    value = datapoints[dataRow];\n                }\n\n                dataVizEl.querySelector( `rect.state.${ dataRow }` ).parentElement.querySelectorAll('text')[1].textContent = value;\n            }\n        }\n\n        console.log( {\n            min: ev.target.min,\n            max: ev.target.max,\n            value: ev.target.value,\n            index: dataIndex,\n            prefix: ev.target.dataset.prefix,\n            suffix: ev.target.dataset.suffix,\n            data: mapData\n        } );\n      } );\n    }\n\n\n\n} );\n\n// document.querySelector( 'rect.state.NY' );"]}