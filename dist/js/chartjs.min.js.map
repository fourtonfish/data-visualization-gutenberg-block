{"version":3,"sources":["chartjs.js"],"names":["ready","fn","document","readyState","addEventListener","window","ftfHelpers","isMobile","a","check","navigator","userAgent","vendor","opera","test","substr","convertHex","hex","opacity","parseInt","substring","p","c0","c1","r","g","b","P","f","t","h","i","m","Math","round","this","pSBCr","d","n","length","x","replace","split","slice","parseFloat","result","l","pow","toString","undefined","invertColor","bw","indexOf","padZero","str","len","Array","renderChart","chartEl","chartOptions","dataset","config","eval","console","log","err","chartLabels","chartData","type","sourceId","JSON","parse","stringify","ftfDataviz","data_labels_raw","data_series_raw","datavizType","sort","data_labels_sorted","data_series_sorted","data_labels","data_series","zeros","ignoreNull","forEach","datapoints","indexOuter","datapoint","indexInner","removeDatapoint","filter","item","limit","axesLabels","axesValues","dataRows","data","index","axis_label_values","label","__custom_meta","prefix","suffix","colorScheme","colorPalettes","backgroundColor","borderColor","fill","colorSchemeIndex","_loop","columnFilter","datasets","concat","map","dataArray","options","scaleLabel","display","labelString","axis_label_title","ticks","beginAtZero","logScale","userCallback","value","toLocaleString","maxTicksLimit","isAdmin","scales","yAxes","tooltips","callbacks","tooltipItem","xLabel","datasetIndex","labels","yLabel","responsive","hoverBorderColor","pSBC","borderWidth","xAxes","selectedColorScheme","Object","keys","color","hoverBorderWidth","title","labelY","y","position","stepSize","callback","Date","toLocaleDateString","language","month","year","minorTickInterval","legend","getDate","push","day","showGridlines","xAxis","gridLines","drawBorder","drawOnChartArea","yAxis","querySelector","setAttribute","svgBorder","style","fontSize","height","width","newChart","Chart","activate","activateNext","controller","meta","removeHoverStyle","selectedIndex","setHoverStyle","render","clearActive","parentElement","getDatasetMeta","activatePrev","e","key","getElementsByClassName","from","charts","querySelectorAll","_iterator","s","_step","done","ev","dataVizEl","target","closest","innerHTML","mapData","dataIndex","min","dataRow","sliders","textContent","max"],"mappings":"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","file":"chartjs.min.js","sourcesContent":["'use strict';\n\nfunction ready( fn ) {\n    if ( document.readyState != 'loading' ){\n        fn();\n    } else {\n        document.addEventListener( 'DOMContentLoaded', fn );\n    }\n}\n\nwindow.ftfHelpers = window.ftfHelpers || {};\n\nftfHelpers.isMobile = function(){\n    var check = false;\n    (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n    return check;\n}\n\nftfHelpers.convertHex = function( hex, opacity ){\n    /* https://gist.github.com/danieliser/b4b24c9f772066bcf0a6 */\n    if (!hex){\n        hex = '#000000';\n    }\n\n    hex = hex.replace( '#','' );\n\n    let r, g, b;\n\n    r = parseInt( hex.substring( 0,2 ), 16 );\n    g = parseInt( hex.substring( 2,4 ), 16 );\n    b = parseInt( hex.substring( 4,6 ), 16 );\n\n    let result = 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';\n    return result;\n}\n\nftfHelpers.pSBC = function(p,c0,c1,l){\n    let r,g,b,P,f,t,h,i=parseInt,m=Math.round,a=typeof(c1)==\"string\";\n    if(typeof(p)!=\"number\"||p<-1||p>1||typeof(c0)!=\"string\"||(c0[0]!='r'&&c0[0]!='#')||(c1&&!a))return null;\n    if(!this.pSBCr)this.pSBCr=(d)=>{\n        let n=d.length,x={};\n        if(n>9){\n            [r,g,b,a]=d=d.split(\",\"),n=d.length;\n            if(n<3||n>4)return null;\n            x.r=i(r[3]==\"a\"?r.slice(5):r.slice(4)),x.g=i(g),x.b=i(b),x.a=a?parseFloat(a):-1\n        }else{\n            if(n==8||n==6||n<4)return null;\n            if(n<6)d=\"#\"+d[1]+d[1]+d[2]+d[2]+d[3]+d[3]+(n>4?d[4]+d[4]:\"\");\n            d=i(d.slice(1),16);\n            if(n==9||n==5)x.r=d>>24&255,x.g=d>>16&255,x.b=d>>8&255,x.a=m((d&255)/0.255)/1000;\n            else x.r=d>>16,x.g=d>>8&255,x.b=d&255,x.a=-1\n        }return x};\n    h=c0.length>9,h=a?c1.length>9?true:c1==\"c\"?!h:false:h,f=this.pSBCr(c0),P=p<0,t=c1&&c1!=\"c\"?this.pSBCr(c1):P?{r:0,g:0,b:0,a:-1}:{r:255,g:255,b:255,a:-1},p=P?p*-1:p,P=1-p;\n    if(!f||!t)return null;\n    if(l)r=m(P*f.r+p*t.r),g=m(P*f.g+p*t.g),b=m(P*f.b+p*t.b);\n    else r=m((P*f.r**2+p*t.r**2)**0.5),g=m((P*f.g**2+p*t.g**2)**0.5),b=m((P*f.b**2+p*t.b**2)**0.5);\n    a=f.a,t=t.a,f=a>=0||t>=0,a=f?a<0?t:t<0?a:a*P+t*p:0;\n    if(h)return\"rgb\"+(f?\"a(\":\"(\")+r+\",\"+g+\",\"+b+(f?\",\"+m(a*1000)/1000:\"\")+\")\";\n    else return\"#\"+(4294967296+r*16777216+g*65536+b*256+(f?m(a*255):0)).toString(16).slice(1,f?undefined:-2)\n}\n\nftfHelpers.invertColor = function( hex, bw ) {\n    if ( !hex ){\n        return null;\n    }\n    if ( hex.indexOf( '#' ) === 0 ) {\n        hex = hex.slice( 1 );\n    }\n\n    if ( hex.length === 3 ) {\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n\n    var r = parseInt( hex.slice( 0, 2 ), 16 ),\n        g = parseInt( hex.slice( 2, 4 ), 16 ),\n        b = parseInt( hex.slice( 4, 6 ), 16 );\n\n    if ( bw ) {\n        return ( r * 0.299 + g * 0.587 + b * 0.114 ) > 186\n            ? '#000000'\n            : '#FFFFFF';\n    }\n\n    r = ( 255 - r ).toString( 16 );\n    g = ( 255 - g ).toString( 16 );\n    b = ( 255 - b ).toString( 16 );\n\n    return '#' + ftfHelpers.padZero( r ) + ftfHelpers.padZero( g ) + ftfHelpers.padZero( b );\n}\n\nftfHelpers.padZero = function( str, len ) {\n    len = len || 2;\n    var zeros = new Array( len ).join( '0' );\n    return ( zeros + str ).slice( -len );\n}\n\nftfHelpers.renderChart = function( chartEl ){\n    if ( !chartEl ){ return false; }\n\n    let chartOptions = {};\n\n    if ( chartEl.dataset.config ){\n        try{\n            // chartOptions = JSON.parse( chartEl.dataset.config );\n            chartOptions = eval( '(' + chartEl.dataset.config + ')' );\n        } catch( err ){ console.log( err ) /* noop */ }\n    } else{\n        let colorSchemeIndex = 3;\n        let datavizType = chartEl.dataset.type || 'bar';\n\n        let chartLabels, chartData;\n        if ( chartEl.dataset.sourceId ){\n            if ( datavizType === 'scatter' ){\n                chartLabels = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels_raw ) );\n                chartData = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_series_raw ) );\n            }\n            else if ( datavizType === 'scatter-dates' ){\n                chartData = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels_raw ) );\n                chartLabels = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_series_raw ) );\n            }\n            else if ( chartEl.dataset.sort && chartEl.dataset.sort === 'true' ){\n                chartLabels = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels_sorted ) );\n                chartData = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_series_sorted ) );\n            } else {\n                chartLabels = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels ) );\n                chartData = JSON.parse( JSON.stringify( window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_series ) );\n            }            \n        }\n\n        if ( chartEl.dataset.ignoreNull && chartEl.dataset.ignoreNull === 'true' ){\n\n            chartData.forEach( function( datapoints, indexOuter ){\n                let removeDatapoint = true;\n\n                datapoints.forEach( function( datapoint, indexInner ){\n                    if ( chartData[indexOuter][indexInner] && parseInt( chartData[indexOuter][indexInner] ) !== 0 ){\n                        removeDatapoint = false;\n                    }\n                } );\n\n                if ( removeDatapoint ){\n                    delete chartData[indexOuter];\n                    delete chartLabels[indexOuter];\n                }\n            } );\n\n            chartData = chartData.filter( function ( item ){ return item != undefined } );\n            chartLabels = chartLabels.filter( function ( item ){ return item != undefined } );\n        }\n\n\n        if ( chartEl.dataset.sort && chartEl.dataset.sort === 'true' && chartEl.dataset.limit ){\n            chartLabels = chartLabels.slice( 0, chartEl.dataset.limit );\n            chartData = chartData.slice( 0, chartEl.dataset.limit );\n        }\n\n        if ( chartData && chartData.length > 3 ){\n            colorSchemeIndex = chartData.length;\n        }\n\n        const dataRows = chartData ? chartData[0].length : 0;\n        let datasets = [];\n\n        for( let i = 0; i < dataRows; i++ ){\n            let dataArray = [];\n            let label = '';\n\n            chartData.forEach( function( data, index ){\n                if ( chartEl.dataset.sourceId ){\n                    label = window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_values[i];                    \n                }\n\n                // const label = chartData[i][index];\n                dataArray.push( chartData[index][i] );\n            } );\n\n            let dataset = {\n                label: label,\n                data: dataArray,\n                __custom_meta: {\n                    prefix: chartEl.dataset.prefix,\n                    suffix: chartEl.dataset.suffix\n                }\n            };\n\n            if ( chartEl.dataset.colorScheme ){\n                if ( chartEl.dataset.colorScheme && ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ){\n                    if ( [ 'bar', 'horizontalBar' ].indexOf( datavizType ) !== -1 ){\n                        dataset.backgroundColor = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows+3][i];\n                    } else if ( datavizType === 'line' ){\n                        dataset.borderColor = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows+3][i];\n                        dataset.fill = false;\n                    }\n                }\n\n            }\n\n            datasets.push( dataset );\n        }\n\n        if ( chartEl.dataset.columnFilter && chartEl.dataset.columnFilter === 'true' ){\n            for ( let i = 1; i < datasets.length; i++ ){\n                let selectHtml = `<label>${datasets[i].label}\n                    <select name=\"ftf-dataviz-filter-${ chartEl.dataset.sourceId }\" id=\"ftf-dataviz-filter-${ chartEl.dataset.sourceId }\">\n                      ${\n                        datasets[i].data.map( function( data ){\n                            return `<option value=\"option\">option</option>`;\n                        } )\n                      }\n                    </select>\n                </label>`; \n            }\n        \n            datasets = [datasets[0]];\n        }\n\n        chartOptions = {\n            type: datavizType,\n            data: {\n                labels: chartLabels,\n                datasets: datasets\n            },\n            options: {}\n        };\n\n        let axesLabels, axesValues;\n\n        switch ( datavizType ){\n            case 'horizontalBar':\n            case 'bar':\n            case 'line':\n                axesLabels = [{\n                    scaleLabel: {\n                        display: true,\n                        // labelString: chartEl.dataset.axisLabelData\n                        labelString: chartEl.dataset.sourceId ? window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_title : ''\n                    },\n                    ticks: {\n                        beginAtZero: true,\n                        // userCallback: function( value, index, values)  {\n                        //     return value.toLocaleString();\n                        // }\n                    }\n                }];\n\n                axesValues = [{\n                    scaleLabel: {\n                        display: true,\n                        labelString: chartEl.dataset.label\n                    },\n                    type: chartEl.dataset.logScale ? 'logarithmic' : 'linear',\n                    ticks: {\n                        beginAtZero: true,\n                        userCallback: function( value, index, values)  {\n                            return chartEl.dataset.prefix + value.toLocaleString() + chartEl.dataset.suffix;\n                        }\n                    }\n                }];\n\n                if ( chartEl.dataset.logScale && chartData.length > 4 ){\n                    /* Temporary fix for labels overlapping when using logarithmic scale. */\n                    // axesValues[0].ticks.minRotation = 30;\n                    axesValues[0].ticks.maxTicksLimit = chartData.length;\n                }\n\n                if ( ftfHelpers.isAdmin() ){\n                    // axesValues[0].ticks.maxTicksLimit = chartData.length;\n                    axesValues[0].ticks.maxTicksLimit = 4;\n                }\n\n                if ( datavizType === 'horizontalBar' ){\n                    chartOptions.options.scales = {\n                        xAxes: axesValues,\n                        yAxes: axesLabels\n                    };\n\n                    chartOptions.options.tooltips = {\n                      callbacks: {\n                        label: function( tooltipItem, data ) {\n                            return data['datasets'][0]['__custom_meta']['prefix'] + tooltipItem.xLabel.toLocaleString() + data['datasets'][0]['__custom_meta']['suffix'];\n                        }\n                      }\n                    }\n\n                } else {\n                    chartOptions.options.scales = {\n                        xAxes: axesLabels,\n                        yAxes: axesValues\n                    };\n\n                    chartOptions.options.tooltips = {\n                      callbacks: {\n                        title: function(tooltipItem, data) {\n                            return data.datasets[tooltipItem[0].datasetIndex].label;\n                        },\n                        label: function( tooltipItem, data ) {\n                            return `${data.labels[tooltipItem.index]}: ${data['datasets'][0]['__custom_meta']['prefix']}${tooltipItem.yLabel.toLocaleString()}${data['datasets'][0]['__custom_meta']['suffix']}`;\n                        }\n                      }\n                    }\n                }                \n\n                chartOptions.options.responsive = true;\n\n                if ( chartEl.dataset.colorScheme && ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ){\n                    chartOptions.data.datasets.forEach( function( dataset, index ){\n                        dataset.hoverBorderWidth = 4;\n                        dataset.hoverBorderColor = ftfHelpers.pSBC( -0.05, ftfHelpers.invertColor( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows+3][index] ) );\n                        dataset.borderWidth = 4;\n                    } );\n\n                }\n\n                break;\n            case 'pie':\n            case 'doughnut':\n            case 'polarArea':\n                for( let i = 0; i < dataRows; i++ ){\n                    if ( chartOptions.data && chartOptions.data.datasets[i] ){\n                        let selectedColorScheme;\n\n                        if ( chartEl.dataset.colorScheme ){\n                            if ( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][chartLabels.length] ){\n                                selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][chartLabels.length];\n                            } else {\n                                selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][Object.keys( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ).length - 3];\n                            }\n\n                            chartOptions.data.datasets[i].backgroundColor = selectedColorScheme;\n                            chartOptions.data.datasets[i].hoverBorderColor = selectedColorScheme.map( function( color ){\n                                return ftfHelpers.pSBC( -0.05, ftfHelpers.invertColor( color ) );\n                            } );\n\n                            chartOptions.data.datasets[i].hoverBorderWidth = 4;\n                            chartOptions.data.datasets[i].borderWidth = 4;\n                        }\n                    }\n                }\n\n                chartOptions.options.tooltips = {\n                  callbacks: {\n                    title: function(tooltipItem, data) {\n                        return data['labels'][tooltipItem[0]['index']];\n                    },\n                    label: function( tooltipItem, data ) {\n                        return data['datasets'][0]['__custom_meta']['prefix'] + parseInt( data['datasets'][0]['data'][tooltipItem['index']] ).toLocaleString() + data['datasets'][0]['__custom_meta']['suffix'];\n                    }\n                  }\n                }\n\n                break;\n            case 'radar':\n                for( let i = 0; i < dataRows; i++ ){\n                    if ( chartOptions.data && chartOptions.data.datasets[i] ){\n                    \n\n                        let selectedColorScheme;\n\n                        if ( chartEl.dataset.colorScheme ){\n                            if ( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows] ){\n                                selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows];\n                            } else {\n                                selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][Object.keys( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ).length - 3];\n                            }                        \n                            // chartOptions.data.datasets[i].fill = 'start';\n                            chartOptions.data.datasets[i].backgroundColor = ftfHelpers.convertHex( selectedColorScheme[i], 20 );\n                            chartOptions.data.datasets[i].borderColor = ftfHelpers.convertHex( selectedColorScheme[i], 40 );\n                            chartOptions.data.datasets[i].hoverBorderColor = ftfHelpers.convertHex( ftfHelpers.pSBC( -0.05, ftfHelpers.invertColor( selectedColorScheme[i] ) ), 40 );\n\n                            chartOptions.data.datasets[i].hoverBorderWidth = 4;\n                            chartOptions.data.datasets[i].borderWidth = 4;\n                        }\n                    }\n                }\n\n                chartOptions.options.tooltips = {\n                  callbacks: {\n                    title: function(tooltipItem, data) {\n                        return data['labels'][tooltipItem[0]['index']];\n                    },\n                    label: function( tooltipItem, data ) {\n                        return data['datasets'][0]['__custom_meta']['prefix'] + parseInt( data['datasets'][0]['data'][tooltipItem['index']] ).toLocaleString() + data['datasets'][0]['__custom_meta']['suffix'];\n                    }\n                  }\n                }\n\n                break;\n            case 'scatter':\n            case 'scatter-dates':\n                const labelX = chartEl.dataset.sourceId ? window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_title : '',\n                      labelY = chartOptions.data.datasets[0].label;\n\n                let selectedColorScheme;\n\n                if ( chartEl.dataset.colorScheme && chartOptions.data.datasets[0] ){\n                    if ( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows] ){\n                        selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][dataRows];\n                    } else {\n                        selectedColorScheme = ftfHelpers.colorPalettes[chartEl.dataset.colorScheme][Object.keys( ftfHelpers.colorPalettes[chartEl.dataset.colorScheme] ).length - 3];\n                    }\n\n\n                    chartOptions.data.datasets[0].backgroundColor = ftfHelpers.convertHex( selectedColorScheme[0], 20 );\n                    chartOptions.data.datasets[0].borderColor = ftfHelpers.convertHex( selectedColorScheme[0], 40 );\n                    chartOptions.data.datasets[0].hoverBorderColor = ftfHelpers.convertHex( ftfHelpers.pSBC( -0.05, ftfHelpers.invertColor( selectedColorScheme[0] ) ), 40 );\n                }\n\n                chartOptions.data.datasets[0].hoverBorderWidth = 4;\n                chartOptions.data.datasets[0].borderWidth = 4;\n\n                axesLabels = [{\n                    scaleLabel: {\n                        display: true,\n                        // labelString: chartEl.dataset.axisLabelData\n                        labelString: chartEl.dataset.sourceId ? window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_title : ''\n                    },\n                    ticks: {\n                        // max: 3,\n                        // beginAtZero: true,\n                        // userCallback: function( value, index, values)  {\n                        //     return value.toLocaleString();\n                        // }\n                    }\n                }];\n\n                axesValues = [{\n                    scaleLabel: {\n                        display: true,\n                        labelString: labelY\n                    },\n                    type: chartEl.dataset.logScale ? 'logarithmic' : 'linear',\n                    ticks: {\n                        // beginAtZero: true,\n                        userCallback: function( value, index, values)  {\n                            return chartEl.dataset.prefix + value.toLocaleString() + chartEl.dataset.suffix;\n                        }\n                    }\n                }];   \n                \n                chartOptions.options.scales = {\n                    xAxes: axesValues,\n                    yAxes: axesLabels\n                };  \n\n                let datapoints = [];\n                chartOptions.data.labels.forEach( function( dataset, i ){\n\n                    let datapoint = { x: null, y: null };\n\n                    if ( datavizType === 'scatter-dates' ){\n                        chartOptions.type = 'scatter';\n                        chartOptions.options.scales = {\n                            'xAxes': [\n                                {\n                                   'type': 'time',\n                                   'position': 'bottom',\n                                   'ticks': {\n                                        beginAtZero: false,\n                                        stepSize: 10,\n\n                                        callback: (value) => {\n                                          return new Date( value ).toLocaleDateString( navigator.language, { month: 'long', year: 'numeric' } );\n                                        },\n                                    }\n                                }\n                            ],\n                            yAxes: [\n                                {\n                                    ticks: {\n                                        beginAtZero: false,\n                                        display: false\n                                    },\n                                    scaleLabel: {\n                                        display: false,\n                                        // labelString: chartEl.dataset.axisLabelData\n                                        // labelString: chartEl.dataset.sourceId ? window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].axis_label_title : ''\n                                        // labelString: 'Day of the month'\n                                    },\n                                    minorTickInterval: null\n                                }\n                            ]\n                        };\n\n                        chartOptions.options.legend = {\n                            display: false\n                        };\n\n                        const d = new Date( chartOptions.data.labels[i] );\n                        datapoint.x = d;\n\n                        // Day of the month\n                        datapoint.y = d.getDate();\n\n                        // datapoint.y = i;\n                        // datapoint.y = 0;\n\n                    } else {\n                        datapoint.x = parseFloat( chartOptions.data.labels[i] );\n                        datapoint.y = parseFloat( chartOptions.data.datasets[0].data[i] );\n                    }\n\n                    datapoints.push( datapoint );\n                } );\n                chartOptions.data.datasets[0].data = datapoints;\n                chartOptions.data.datasets = [chartOptions.data.datasets[0]];\n                chartOptions.options.tooltips = {\n                  callbacks: {\n                    title: function(tooltipItem, data) {\n                      return new Date( data['labels'][tooltipItem[0]['index']] ).toLocaleDateString( navigator.language, { day: 'numeric', month: 'long', year: 'numeric' } );\n\n                    },\n                    label: function( tooltipItem, data ) {\n                        return chartEl.dataset.prefix + window.ftfDataviz[parseInt( chartEl.dataset.sourceId )].data_labels_raw[tooltipItem['index']] + chartEl.dataset.suffix;\n                    }\n                  }\n                }                \n                break;\n        }\n\n    }\n\n    if ( !chartEl.dataset.showGridlines || chartEl.dataset.showGridlines.toString() === 'false' ){\n        chartOptions.options.scales = chartOptions.options.scales  || {};\n        chartOptions.options.scales.xAxes = chartOptions.options.scales.xAxes  || [];\n        chartOptions.options.scales.yAxes = chartOptions.options.scales.yAxes  || [];\n\n        chartOptions.options.scales.xAxes.forEach( function( xAxis ){\n            xAxis.gridLines = {\n            display: true,\n            drawBorder: true,\n            drawOnChartArea: false,\n            };\n        } );\n\n        chartOptions.options.scales.yAxes.forEach( function( yAxis ){\n            yAxis.gridLines = {\n            display: true,\n            drawBorder: true,\n            drawOnChartArea: false,\n            };\n        } );\n    }\n    if ( chartEl.dataset.options ){\n        try{\n            chartOptions.options = eval( '(' + chartEl.dataset.options + ')' );\n        } catch( err ){ console.log( err ) /* noop */ }\n    }\n\n    if ( ftfHelpers.isMobile() ){\n        let svgBorder = chartEl.parentElement.querySelector( 'svg' );\n\n        if ( svgBorder ){\n            svgBorder.setAttribute( 'viewBox', '0 0 500 500' );\n            svgBorder.querySelector( 'path' ).setAttribute( 'd', 'M 0 0  H 500 V 500 H 0 L 0 0' );\n            svgBorder.querySelector( 'textPath' ).style.fontSize = '24px';\n        }\n        chartEl.height = chartEl.width;\n    }\n\n    if ( chartOptions ){\n        console.log( 'rendering chart...', chartEl, chartOptions );\n        // console.log( 'data', chartOptions.data.datasets );\n\n        try{\n            let newChart = new Chart( chartEl, chartOptions );\n            if ( !ftfHelpers.isAdmin() ){\n                /* Chart.js accessibility via https://codepen.io/kurkle/pen/WNrwjMp */\n\n                let selectedIndex = -1;\n                const meta = newChart.getDatasetMeta( 0 );\n\n                function clearActive() {\n                    if (selectedIndex > -1) {\n                        meta.controller.removeHoverStyle( meta.data[selectedIndex], 0, selectedIndex );\n                    }\n                }\n\n                function activate() {\n                    meta.controller.setHoverStyle( meta.data[selectedIndex], 0, selectedIndex );\n                    newChart.render();\n                }\n\n                function activateNext() {\n                    clearActive();\n                    selectedIndex = (selectedIndex + 1) % meta.data.length;\n                    activate();\n                }\n\n                function activatePrev() {\n                    clearActive();\n                    selectedIndex = ( selectedIndex || meta.data.length ) -1;\n                    activate();\n                }\n\n                chartEl.addEventListener( 'focus', function(){\n                    if (selectedIndex === -1) {\n                        activateNext();\n                    } else {\n                        activate();\n                    }\n                } );\n\n                chartEl.addEventListener( 'blur', function(){\n                    clearActive();\n                    newChart.render();\n                } );\n\n                chartEl.addEventListener( 'keydown', function( e ) {\n                    if ( e.key === 'ArrowRight' ) {\n                        activateNext();\n                    } else if ( e.key === 'ArrowLeft' ) {\n                        activatePrev();\n                    }\n                } );\n            }\n        } catch( err ){ /* noop */ }\n    }\n}\n\nftfHelpers.isAdmin = function(){\n    const wpAdmin = document.getElementsByClassName( 'wp-admin' );\n    return wpAdmin && wpAdmin.length;\n}\n\nready( function(){\n    let charts = document.getElementsByClassName( 'ftf-dataviz-chart' );\n    Array.from( charts ).forEach( function( chartEl ){\n        ftfHelpers.renderChart( chartEl );\n    } );\n    let sliders = document.querySelectorAll( '.ftf-dataviz-slider-container' );\n\n    for ( const slider of sliders ) {\n      slider.addEventListener( 'input', function( ev ){\n        const dataVizEl = ev.target.closest( '.ftf-dataviz' );\n\n        // console.log( 'dataVizEl', dataVizEl );\n        // console.log( 'ev.target', ev.target );\n        // console.log( 'ev.target.dataset.data', ev.target.dataset.data );\n\n        dataVizEl.querySelector( '.ftf-dataviz-slider-title' ).innerHTML = ev.target.value;\n\n        const mapData = JSON.parse( ev.target.dataset.data );\n        const dataIndex = ev.target.value - ev.target.min;\n\n        let datapoints = {};\n\n        mapData.forEach( function( datapoint ){\n            datapoints[datapoint[0]] = datapoint[dataIndex+1]\n        } );\n\n        // console.log( 'datapoints', datapoints );\n\n        for ( const dataRow in datapoints ){\n            if ( dataRow && dataRow.length > 0 ){\n\n                let value;\n\n                if ( datapoints[dataRow] ){\n                    value = ev.target.dataset.prefix + datapoints[dataRow] + ev.target.dataset.suffix;\n                } else {\n                    value = datapoints[dataRow];\n                }\n\n                dataVizEl.querySelector( `rect.state.${ dataRow }` ).parentElement.querySelectorAll('text')[1].textContent = value;\n            }\n        }\n\n        console.log( {\n            min: ev.target.min,\n            max: ev.target.max,\n            value: ev.target.value,\n            index: dataIndex,\n            prefix: ev.target.dataset.prefix,\n            suffix: ev.target.dataset.suffix,\n            data: mapData\n        } );\n      } );\n    }\n\n\n\n} );\n\n// document.querySelector( 'rect.state.NY' );"]}